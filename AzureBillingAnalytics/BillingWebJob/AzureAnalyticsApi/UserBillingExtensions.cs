// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using BillingWebJob.Models;

namespace BillingWebJob
{
    public static partial class UserBillingExtensions
    {
        /// <param name='operations'>
        /// Reference to the BillingWebJob.IUserBilling.
        /// </param>
        public static IList<UsageInfoModel> GetCurrentMonthData(this IUserBilling operations)
        {
            return Task.Factory.StartNew((object s) => { return ((IUserBilling) s).GetCurrentMonthDataAsync(); }
                    , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                .Unwrap()
                .GetAwaiter()
                .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.IUserBilling.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageInfoModel>> GetCurrentMonthDataAsync(this IUserBilling operations,
            CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<BillingWebJob.Models.UsageInfoModel>>
                result =
                    await
                        operations.GetCurrentMonthDataWithOperationResponseAsync(cancellationToken)
                            .ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.IUserBilling.
        /// </param>
        /// <param name='startDateValue'>
        /// Required.
        /// </param>
        /// <param name='endDateValue'>
        /// Required.
        /// </param>
        public static IList<UsageInfoModel> GetDataForMonthRange(this IUserBilling operations, string startDateValue,
            string endDateValue)
        {
            return
                Task.Factory.StartNew(
                        (object s) => { return ((IUserBilling) s).GetDataForMonthRangeAsync(startDateValue, endDateValue); }
                        , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                    .Unwrap()
                    .GetAwaiter()
                    .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.IUserBilling.
        /// </param>
        /// <param name='startDateValue'>
        /// Required.
        /// </param>
        /// <param name='endDateValue'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageInfoModel>> GetDataForMonthRangeAsync(this IUserBilling operations,
            string startDateValue, string endDateValue,
            CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<BillingWebJob.Models.UsageInfoModel>>
                result =
                    await
                        operations.GetDataForMonthRangeWithOperationResponseAsync(startDateValue, endDateValue,
                            cancellationToken).ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.IUserBilling.
        /// </param>
        /// <param name='mMYYYY'>
        /// Required.
        /// </param>
        public static IList<UsageInfoModel> GetSingleMonthData(this IUserBilling operations, string mMYYYY)
        {
            return Task.Factory.StartNew((object s) => { return ((IUserBilling) s).GetSingleMonthDataAsync(mMYYYY); }
                    , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                .Unwrap()
                .GetAwaiter()
                .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.IUserBilling.
        /// </param>
        /// <param name='mMYYYY'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageInfoModel>> GetSingleMonthDataAsync(this IUserBilling operations,
            string mMYYYY, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<BillingWebJob.Models.UsageInfoModel>>
                result =
                    await
                        operations.GetSingleMonthDataWithOperationResponseAsync(mMYYYY, cancellationToken)
                            .ConfigureAwait(false);
            return result.Body;
        }
    }
}