// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using BillingWebJob.Models;

namespace BillingWebJob
{
    public static partial class CspSummaryExtensions
    {
        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        public static IList<UsageBasedLineItem> GetCSPSummaryData(this ICspSummary operations)
        {
            return Task.Factory.StartNew((object s) => { return ((ICspSummary) s).GetCSPSummaryDataAsync(); }
                    , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                .Unwrap()
                .GetAwaiter()
                .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageBasedLineItem>> GetCSPSummaryDataAsync(this ICspSummary operations,
            CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse
                <System.Collections.Generic.IList<BillingWebJob.Models.UsageBasedLineItem>> result =
                    await
                        operations.GetCSPSummaryDataWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        public static IList<UsageBasedLineItem> GetCurrentMonthData(this ICspSummary operations)
        {
            return Task.Factory.StartNew((object s) => { return ((ICspSummary) s).GetCurrentMonthDataAsync(); }
                    , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                .Unwrap()
                .GetAwaiter()
                .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageBasedLineItem>> GetCurrentMonthDataAsync(this ICspSummary operations,
            CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse
                <System.Collections.Generic.IList<BillingWebJob.Models.UsageBasedLineItem>> result =
                    await
                        operations.GetCurrentMonthDataWithOperationResponseAsync(cancellationToken)
                            .ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        /// <param name='startMMYYYY'>
        /// Required.
        /// </param>
        /// <param name='endMMYYYY'>
        /// Required.
        /// </param>
        public static IList<UsageBasedLineItem> GetDataForMonthRange(this ICspSummary operations, string startMMYYYY,
            string endMMYYYY)
        {
            return
                Task.Factory.StartNew(
                        (object s) => { return ((ICspSummary) s).GetDataForMonthRangeAsync(startMMYYYY, endMMYYYY); }
                        , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                    .Unwrap()
                    .GetAwaiter()
                    .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        /// <param name='startMMYYYY'>
        /// Required.
        /// </param>
        /// <param name='endMMYYYY'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageBasedLineItem>> GetDataForMonthRangeAsync(this ICspSummary operations,
            string startMMYYYY, string endMMYYYY,
            CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse
                <System.Collections.Generic.IList<BillingWebJob.Models.UsageBasedLineItem>> result =
                    await
                        operations.GetDataForMonthRangeWithOperationResponseAsync(startMMYYYY, endMMYYYY,
                            cancellationToken).ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        /// <param name='mmyyyy'>
        /// Required.
        /// </param>
        public static IList<UsageBasedLineItem> GetSingleMonthData(this ICspSummary operations, string mmyyyy)
        {
            return Task.Factory.StartNew((object s) => { return ((ICspSummary) s).GetSingleMonthDataAsync(mmyyyy); }
                    , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default)
                .Unwrap()
                .GetAwaiter()
                .GetResult();
        }

        /// <param name='operations'>
        /// Reference to the BillingWebJob.ICspSummary.
        /// </param>
        /// <param name='mmyyyy'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<UsageBasedLineItem>> GetSingleMonthDataAsync(this ICspSummary operations,
            string mmyyyy, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse
                <System.Collections.Generic.IList<BillingWebJob.Models.UsageBasedLineItem>> result =
                    await
                        operations.GetSingleMonthDataWithOperationResponseAsync(mmyyyy, cancellationToken)
                            .ConfigureAwait(false);
            return result.Body;
        }
    }
}