// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BillingWebJob
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CspSummary.
    /// </summary>
    public static partial class CspSummaryExtensions
    {
            /// <summary>
            /// Api which returns CSP summarized invoice line items for all months and
            /// years since the CSP account has
            /// been active.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UsageBasedLineItem> GetCSPSummaryData(this ICspSummary operations)
            {
                return Task.Factory.StartNew(s => ((ICspSummary)s).GetCSPSummaryDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for all months and
            /// years since the CSP account has
            /// been active.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UsageBasedLineItem>> GetCSPSummaryDataAsync(this ICspSummary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCSPSummaryDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for the current month
            /// only.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UsageBasedLineItem> GetCurrentMonthData(this ICspSummary operations)
            {
                return Task.Factory.StartNew(s => ((ICspSummary)s).GetCurrentMonthDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for the current month
            /// only.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UsageBasedLineItem>> GetCurrentMonthDataAsync(this ICspSummary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentMonthDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for the given month
            /// input.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='monthYear'>
            /// Provide month and year in "mm-yyyy" format. Example: "02-2016".
            /// </param>
            public static IList<UsageBasedLineItem> GetSingleMonthData(this ICspSummary operations, string monthYear)
            {
                return Task.Factory.StartNew(s => ((ICspSummary)s).GetSingleMonthDataAsync(monthYear), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for the given month
            /// input.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='monthYear'>
            /// Provide month and year in "mm-yyyy" format. Example: "02-2016".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UsageBasedLineItem>> GetSingleMonthDataAsync(this ICspSummary operations, string monthYear, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleMonthDataWithHttpMessagesAsync(monthYear, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for the given month
            /// range input.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startMonthYear'>
            /// Provide range start month and year in "mm-yyyy" format. Example: "02-2016".
            /// </param>
            /// <param name='endMonthYear'>
            /// Provide range end month and year in "mm-yyyy" format. Example: "02-2016".
            /// </param>
            public static IList<UsageBasedLineItem> GetDataForMonthRange(this ICspSummary operations, string startMonthYear, string endMonthYear)
            {
                return Task.Factory.StartNew(s => ((ICspSummary)s).GetDataForMonthRangeAsync(startMonthYear, endMonthYear), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Api which returns CSP summarized invoice line items for the given month
            /// range input.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startMonthYear'>
            /// Provide range start month and year in "mm-yyyy" format. Example: "02-2016".
            /// </param>
            /// <param name='endMonthYear'>
            /// Provide range end month and year in "mm-yyyy" format. Example: "02-2016".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UsageBasedLineItem>> GetDataForMonthRangeAsync(this ICspSummary operations, string startMonthYear, string endMonthYear, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataForMonthRangeWithHttpMessagesAsync(startMonthYear, endMonthYear, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
